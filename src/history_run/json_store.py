import json
from tabulate import tabulate
import os


class InteractionLogger:
    def __init__(self, json_folder = os.path.join(os.getcwd(), 'history_run') ,filename="interactions.json"):
        """
        Initializes the InteractionLogger class. Sets the path for the interactions file
        and loads any existing interactions from the file.
        """
        self.json_path = os.path.join(json_folder, filename)
        self.interactions = {}
        self._load_interactions()

    def store_interaction(self, id_run, task_number, time_stamp, model_info, input_data, output_data, shell_feedback):
        """
        Stores a new interaction by adding it to the interactions dictionary and saving it to the file.
        If the id_run or task_number does not exist, it initializes them.

        Args:
            id_run (str/int): Identifier for the run.
            task_number (str/int): Identifier for the task within the run.
            time_stamp (str): Timestamp of when the interaction occurred.
            model_info (str): Information about the model used.
            input_data (str): Input data for the task.
            output_data (str): Output data generated by the model.
            shell_feedback (str): Feedback or additional information from the shell.
        """
        id_run = str(id_run)
        task_number = str(task_number)

        # Initialize run and task if not present
        if id_run not in self.interactions:
            self.interactions[id_run] = {}

        if task_number not in self.interactions[id_run]:
            self.interactions[id_run][task_number] = []

        # Create the interaction record
        interaction = {
            "time_stamp": time_stamp,
            "model_info": model_info,
            "input": input_data,
            "output": output_data,
            "shell_feedback": shell_feedback
        }

        # Append the interaction and save it
        self.interactions[id_run][task_number].append(interaction)
        self._save_interactions()

    def _load_interactions(self):
        """
        Loads existing interactions from the interactions file.
        If the file does not exist, it initializes an empty interactions dictionary.
        """
        if os.path.exists(self.json_path):
            with open(self.json_path, "r") as file:
                self.interactions = json.load(file)
        else:
            self.interactions = {}

    def _save_interactions(self):
        """
        Saves the current interactions to the interactions file in JSON format.
        Ensures the directory exists before writing the file.
        """
        # Create the directory path if it doesn't exist
        os.makedirs(os.path.dirname(self.json_path), exist_ok=True)

        # Save the interactions
        with open(self.json_path, "w") as file:
            json.dump(self.interactions, file, indent=4)

    def _collect_interactions(self, id_run=None, task_number=None):
        """
        Helper method to collect relevant interactions based on the provided id_run and task_number.
        If id_run and/or task_number are specified, it filters the interactions accordingly.

        Args:
            id_run (str/int, optional): Identifier for the run.
            task_number (str/int, optional): Identifier for the task within the run.

        Returns:
            list: A list of relevant interactions.
        """
        if id_run:
            id_run = str(id_run)
            if id_run in self.interactions:
                tasks = self.interactions[id_run]
                if task_number:
                    task_number = str(task_number)
                    return tasks.get(task_number, [])
                # Return all interactions for the run if task_number is not specified
                return [interaction for task_interactions in tasks.values() for interaction in task_interactions]
        else:
            # Collect all interactions if id_run is not specified
            return [
                interaction
                for task_interactions in self.interactions.values()
                for interactions in task_interactions.values()
                for interaction in interactions
            ]
        return []

    def _display_table(self, interactions, headers, output_file):
        """
        Helper method to display interactions in a tabular format and save them to a file.

        Args:
            interactions (list): A list of interaction records.
            headers (list): The headers for the table.
            output_file (str): The file path to save the output.
        """
        if interactions:
            # Print the table
            print(tabulate(interactions, headers, tablefmt="grid"))
            # Save the table to the output file
            with open(output_file, "w") as file:
                file.write(tabulate(interactions, headers, tablefmt="grid"))
        else:
            print("No interactions to display.")

    def _display_plain(self, interactions, output_file):
        """
        Helper method to display interactions in plain text format and save them to a file.

        Args:
            interactions (list): A list of interaction records.
            output_file (str): The file path to save the output.
        """
        if interactions:
            # Create a formatted plain text output
            plain_output = "\n".join(
                f"Input: {i['input']}\nOutput: {i['output']}\nShell Feedback: {i['shell_feedback']}\n{'-' * 50}"
                for i in interactions
            )
            print(plain_output)
            # Save the plain text output to the file
            with open(output_file, "w") as file:
                file.write(plain_output)
        else:
            print("No interactions to display.")

    def display_interactions(self, id_run=None, task_number=None,
                             output_file=os.path.join(os.getcwd(), 'history_run', "json_output.txt")):
        """
        Displays interactions in a tabular format for a specific run and/or task. If id_run or task_number
        are not specified, it displays all interactions.

        Args:
            id_run (str/int, optional): Identifier for the run. Default is None.
            task_number (str/int, optional): Identifier for the task within the run. Default is None.
            output_file (str, optional): The file path to save the output. Default is 'json_output.txt'.
        """
        headers = ["id_run", "task_number", "time_stamp", "model_info", "input", "output", "shell_feedback"]
        interactions = self._collect_interactions(id_run, task_number)

        # Format interactions for display in a table
        formatted_interactions = [
            [id_run, task_number, i["time_stamp"], i["model_info"], i["input"], i["output"], i["shell_feedback"]]
            for i in interactions
        ]

        # Display the table
        self._display_table(formatted_interactions, headers, output_file)

    def display_interactions_plain(self, id_run=None, task_number=None,
                                   output_file=os.path.join(os.getcwd(), 'history_run', "json_output_plain.txt")):
        """
        Displays interactions in plain text format for a specific run and/or task. If id_run or task_number
        are not specified, it displays all interactions.

        Args:
            id_run (str/int, optional): Identifier for the run. Default is None.
            task_number (str/int, optional): Identifier for the task within the run. Default is None.
            output_file (str, optional): The file path to save the output. Default is 'json_output_plain.txt'.
        """
        interactions = self._collect_interactions(id_run, task_number)
        # Display the interactions in plain text format
        self._display_plain(interactions, output_file)

    def clean_plain(self, output_file=os.path.join(os.getcwd(), 'history_run', "json_output_plain.txt")):
        """
        Cleans the plain text interactions file by removing its contents or deleting it entirely.

        Args:
            output_file (str, optional): The file path to the plain text interactions file. Default is 'json_output_plain.txt'.
        """
        try:
            # Check if the file exists
            if os.path.exists(output_file):
                # Open the file in write mode to clear its contents
                with open(output_file, 'w') as file:
                    file.write("")  # Empty the file content
                print(f"File '{output_file}' has been cleaned.")
            else:
                print(f"File '{output_file}' does not exist.")
        except Exception as e:
            print(f"An error occurred while cleaning the file: {e}")
