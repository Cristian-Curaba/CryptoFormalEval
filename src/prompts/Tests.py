Test1="""
Protocol 1:
A -> B : A, senc(N1, K)
B -> A : B, senc(N1, K), senc(N2, K)
A -> B : senc(N2, K)
B -> A : senc(h(N2), K)

where: 
K is a preshared key between A and B
N1 is a nonce generated by A
N2 is a nonce generated by B

Properties:
- Freshness of K
- Authentication of A for B
- Authentication of B for A
"""

Test2 = """
Protocol two:
A -> B : g^a, N1
B -> A : g^b, senc(N1, g^a^b), N2
A -> B : senc(N2, g^b^a)

where
a is a private key generated by A
b is a private key generated by B
N1 is a nonce generated by A
N2 is a nonce generated by B


1. Aliveness
A protocol guarantees to an agent a in role A aliveness of another agent b if, whenever a completes
a run of the protocol, apparently with b in role B, then b has previously been running the protocol.

lemma aliveness:
"All a b t #i.
Commit(a,b,t)@i
==> (Ex id #j. Create(b,id) @ j)

2. Weak agreement
A protocol guarantees to an agent a in role A weak agreement with another agent b if, whenever
agent a completes a run of the protocol, apparently with b in role B, then b has previously been
running the protocol, apparently with a.

lemma weak_agreement:
"All a b t1 #i.
Commit(a,b,t1) @i
==> (Ex t2 #j. Running(b,a,t2) @j)
| (Ex C #r. Reveal(C) @ r & Honest(C) @ i)"
"""

Test3="""
protocol NSLPK3:
1. I -> R: {'1',ni,I}pk(R)
2. I <- R: {'2',ni,nr,R}pk(I)
3. I -> R: {'3',nr}pk(R)

lemma nonce_secrecy:
" /* It cannot be that */
not(
Ex A B s #i.
/* somebody claims to have setup a shared secret, */
Secret(A, B, s) @ i
/* but the adversary knows it */
& (Ex #j. K(s) @ j)

"""

Test4="""
# Protocol DIFFIE_HELLMAN:

### Knowledge: 
    A : B, sec1, sec2;
    B : A, sec1, sec2;

### Actions: 
    [dh_1] A -> B : sec1 . g()^x; 
    [dh_2] B -> A : g()^y; 
    [dh_3] A -> B : sec2 . senc(key, (g()^(x*y)));
    [dh_4] B -> A  : senc(m, key); 
where x, Key are freshly generated by A; y, m are freshly generated by B.

### Property
Secrecy of Key
lemma secrecy:
"All x #i.
Secret(x) @i ==> not (Ex #j. K(x)@j)"

"""
