theory Protocol1 begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2







rule (modulo E) Setup_SharedKey:
   [ Fr( ~k ) ] --> [ !SharedKey( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1:
   [ !SharedKey( $A, $B, k ), Fr( ~N ), Fr( ~M ) ]
  --[ FreshTerm( $A, ~M ), Send( $A, ~N ) ]->
   [ Out( ~N ), St_A_1( $A, $B, k, ~N, ~M ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1:
   [ !SharedKey( $A, $B, k ), In( N ) ]
  --[ Recv( $B, N ), Send( $B, senc(N, k) ) ]->
   [ Out( senc(N, k) ), St_B_1( $A, $B, k, N ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2:
   [ St_A_1( $A, $B, k, N, M ), In( senc(N, k) ) ]
  --[ Recv( $A, senc(N, k) ), Send( $A, senc(M, k) ) ]->
   [ Out( senc(M, k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2:
   [ St_B_1( $A, $B, k, N ), In( senc(M, k) ) ]
  --[ Recv( $B, senc(M, k) ) ]->
   [ ]

  /* has exactly the trivial AC variant */

lemma freshness:
  all-traces
  "¬(∃ party mess #t1 #t2.
      ((FreshTerm( party, mess ) @ #t1) ∧ (FreshTerm( party, mess ) @ #t2)) ∧
      (#t1 < #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ party mess #t1 #t2.
  (FreshTerm( party, mess ) @ #t1) ∧ (FreshTerm( party, mess ) @ #t2)
 ∧
  #t1 < #t2"
*/
simplify
by contradiction /* cyclic */

lemma protocol_execution:
  exists-trace
  "∃ A B M #i #j #k.1 #l.
    (((((Send( A, M ) @ #i) ∧ (Recv( B, M ) @ #j)) ∧ (#i < #j)) ∧
      (Send( B, senc(M, k) ) @ #k.1)) ∧
     (Recv( A, senc(M, k) ) @ #l)) ∧
    (#k.1 < #l)"
/*
guarded formula characterizing all satisfying traces:
"∃ A B M #i #j #k.1 #l.
  (Send( A, M ) @ #i) ∧
  (Recv( B, M ) @ #j) ∧
  (Send( B, senc(M, k) ) @ #k.1) ∧
  (Recv( A, senc(M, k) ) @ #l)
 ∧
  (#i < #j) ∧ (#k.1 < #l)"
*/
simplify
solve( Send( A, M ) @ #i )
  case A_1
  solve( !SharedKey( $A, $B, k ) ▶₀ #i )
    case Setup_SharedKey
    solve( Recv( B.1, ~N ) @ #j )
      case B_1
      solve( !SharedKey( $A.1, $B.1, k.1 ) ▶₀ #j )
        case Setup_SharedKey
        solve( Send( $B.1, senc(~N, k.3) ) @ #k.2 )
          case B_1
          solve( !SharedKey( $A.2, $B.1, k.3 ) ▶₀ #k.2 )
            case Setup_SharedKey
            solve( Recv( $A, senc(~N, ~k.3) ) @ #l )
              case A_2
              solve( St_A_1( $A, $B.2, ~k.2, ~N, M.1 ) ▶₀ #l )
                case A_1
                solve( !KU( ~N ) @ #vk )
                  case A_1
                  solve( !KU( senc(~N, ~k) ) @ #vk.1 )
                    case B_1
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed











/*
WARNING: the following wellformedness checks failed!

Formula terms
=============

  lemma `protocol_execution' uses terms of the wrong form:
    `senc(Bound 4,Free k)', `senc(Bound 4,Free k)'
  
  The only allowed terms are public names and bound node and message
  variables. If you encounter free message variables, then you might
  have forgotten a #-prefix. Sort prefixes can only be dropped where
  this is unambiguous. Moreover, reducible function symbols are
  disallowed.
*/

/*
Generated from:
Tamarin version 1.9.0
Maude version 2.7.1
Git revision: ea7b979e436fc32f98369dd4e349fa0c6f1b1efd, branch: develop
Compiled at: 2024-07-07 08:40:09.374915591 UTC
*/

end