theory OTWAY_REES begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, fst/1, pair/2, pk/1, sdec/2, senc/2, sk/1,
           snd/1
equations:
    adec(aenc(x.1, pk(x.2)), sk(x.2)) = x.1,
    adec(aenc(x.1, sk(x.2)), pk(x.2)) = x.1,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2







rule (modulo E) Asymmetric_key_setup:
   [ Fr( ~f ) ] --> [ !Sk( $A, sk(~f) ), !Pk( $A, pk(~f) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Publish_public_keys:
   [ !Pk( A, pkA ) ] --> [ Out( pkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Symmetric_key_setup:
   [ Fr( ~symK ) ] --> [ !Key( $A, $B, ~symK ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_Knowledge:
   [
   !Key( $A, $S, k_A_S ), !Key( $B, $S, k_B_S ), !Pk( $A, pk(k_A) ),
   !Pk( $B, pk(k_B) ), !Pk( $S, pk(k_S) ), !Sk( $A, sk(k_A) ),
   !Sk( $B, sk(k_B) ), !Sk( $S, sk(k_S) )
   ]
  -->
   [
   St_init_A( $A, $B, sk(k_A), pk(k_A), k_A_S ),
   St_init_B( $B, sk(k_B), pk(k_B), k_B_S ),
   St_init_S( $S, sk(k_S), pk(k_S), k_A_S, k_B_S )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) or1_A:
   [ St_init_A( A, B, sk(k_A), pk(k_A), k_A_S ), Fr( ~n1 ), Fr( ~i ) ]
  -->
   [
   Out( <~i, A, B, senc(<~n1, ~i, A, B>, k_A_S)> ),
   St_or1_A( A, B, ~i, ~n1, sk(k_A), pk(k_A), k_A_S )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) or4_A:
   [
   St_or1_A( A, B, i, n1, sk(k_A), pk(k_A), k_A_S ),
   In( <i, senc(<n1, key>, k_A_S)> )
   ]
  --[ Commit_agreeA( key ) ]->
   [ St_or4_A( A, B, i, key, n1, sk(k_A), pk(k_A), k_A_S ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) or1_B:
   [ St_init_B( B, sk(k_B), pk(k_B), k_B_S ), In( <i, A, B, alpha> ) ]
  -->
   [ St_or1_B( A, B, i, sk(k_B), pk(k_B), k_B_S, alpha ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) or2_B:
   [ St_or1_B( A, B, i, sk(k_B), pk(k_B), k_B_S, alpha ), Fr( ~n2 ) ]
  -->
   [
   Out( <i, A, B, alpha, senc(<~n2, i, A, B>, k_B_S)> ),
   St_or2_B( A, B, i, ~n2, sk(k_B), pk(k_B), k_B_S, alpha )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) or3_B:
   [
   St_or2_B( A, B, i, n2, sk(k_B), pk(k_B), k_B_S, alpha ),
   In( <i, beta, senc(<n2, key>, k_B_S)> )
   ]
  --[ Running_agreeA( key ) ]->
   [ St_or3_B( A, B, i, key, n2, sk(k_B), pk(k_B), k_B_S, beta, alpha ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) or4_B:
   [ St_or3_B( A, B, i, key, n2, sk(k_B), pk(k_B), k_B_S, beta, alpha ) ]
  -->
   [
   Out( <i, beta> ),
   St_or4_B( A, B, i, key, n2, sk(k_B), pk(k_B), k_B_S, beta, alpha )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) or2_S:
   [
   St_init_S( S, sk(k_S), pk(k_S), k_A_S, k_B_S ),
   In( <i, A, B, senc(<n1, i, A, B>, k_A_S), senc(<n2, i, A, B>, k_B_S)> )
   ]
  -->
   [ St_or2_S( A, B, S, i, n1, n2, sk(k_S), pk(k_S), k_A_S, k_B_S ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) or3_S:
   [
   St_or2_S( A, B, S, i, n1, n2, sk(k_S), pk(k_S), k_A_S, k_B_S ),
   Fr( ~key )
   ]
  -->
   [
   Out( <i, senc(<n1, ~key>, k_A_S), senc(<n2, ~key>, k_B_S)> ),
   St_or3_S( A, B, S, i, ~key, n1, n2, sk(k_S), pk(k_S), k_A_S, k_B_S )
   ]

  /* has exactly the trivial AC variant */

lemma agreeA:
  all-traces
  "∀ m1 #i.
    (Commit_agreeA( m1 ) @ #i) ⇒
    ((∃ #j. (Running_agreeA( m1 ) @ #j) ∧ (#j < #i)) ∧
     (¬(∃ #j. (Commit_agreeA( m1 ) @ #j) ∧ (¬(#i = #j)))))"
/*
guarded formula characterizing all counter-examples:
"∃ m1 #i.
  (Commit_agreeA( m1 ) @ #i)
 ∧
  ((∀ #j. (Running_agreeA( m1 ) @ #j) ⇒ ¬(#j < #i)) ∨
   (∃ #j. (Commit_agreeA( m1 ) @ #j) ∧ ¬(#i = #j)))"
*/
simplify
solve( (∀ #j. (Running_agreeA( m1 ) @ #j) ⇒ ¬(#j < #i))  ∥
       (∃ #j. (Commit_agreeA( m1 ) @ #j) ∧ ¬(#i = #j)) )
  case case_1
  solve( St_or1_A( A, B, i.1, n1, sk(k_A), pk(k_A), k_A_S ) ▶₀ #i )
    case or1_A
    solve( !KU( senc(<~n1, m1>, ~symK) ) @ #vk.2 )
      case or1_A
      solve( !KU( ~i.1 ) @ #vk.2 )
        case or1_A_case_1
        SOLVED // trace found
      qed
    qed
  qed
qed



















/*
WARNING: the following wellformedness checks failed!

Message Derivation Checks
=========================

  The variables of the follwing rule(s) are not derivable from their premises, you may be performing unintended pattern matching.

Rule Init_Knowledge: 
Failed to derive Variable(s): k_A, k_B, k_S

Rule or1_A: 
Failed to derive Variable(s): k_A

Rule or4_A: 
Failed to derive Variable(s): k_A

Rule or1_B: 
Failed to derive Variable(s): k_B

Rule or2_B: 
Failed to derive Variable(s): k_B

Rule or3_B: 
Failed to derive Variable(s): k_B

Rule or4_B: 
Failed to derive Variable(s): k_B

Rule or2_S: 
Failed to derive Variable(s): k_S

Rule or3_S: 
Failed to derive Variable(s): k_S
*/

/*
Generated from:
Tamarin version 1.9.0
Maude version 2.7.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2024-07-24 13:23:13.794968 UTC
*/

end